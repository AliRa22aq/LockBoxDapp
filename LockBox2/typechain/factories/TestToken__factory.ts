/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestToken, TestTokenInterface } from "../TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260096080819052682a32b9ba1021b7b4b760b91b60a090815261002a9160039190610067565b5060408051808201909152600280825261544360f01b602090920191825261005491600491610067565b5034801561006157600080fd5b5061013b565b82805461007390610100565b90600052602060002090601f01602090048101928261009557600085556100db565b82601f106100ae57805160ff19168380011785556100db565b828001600101855582156100db579182015b828111156100db5782518255916020019190600101906100c0565b506100e79291506100eb565b5090565b5b808211156100e757600081556001016100ec565b60028104600182168061011457607f821691505b6020821081141561013557634e487b7160e01b600052602260045260246000fd5b50919050565b6108578061014a6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461011e57806370a082311461013357806395d89b4114610146578063a9059cbb1461014e578063dd62ed3e146101615761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100e157806323b872dd146100f6578063313ce56714610109575b600080fd5b6100ab610174565b6040516100b89190610585565b60405180910390f35b6100d46100cf366004610551565b610206565b6040516100b8919061057a565b6100e961021c565b6040516100b891906107ab565b6100d4610104366004610516565b610222565b610111610294565b6040516100b891906107b4565b61013161012c366004610551565b610299565b005b6100e96101413660046104c3565b610307565b6100ab610326565b6100d461015c366004610551565b610335565b6100e961016f3660046104e4565b610342565b606060038054610183906107e6565b80601f01602080910402602001604051908101604052809291908181526020018280546101af906107e6565b80156101fc5780601f106101d1576101008083540402835291602001916101fc565b820191906000526020600020905b8154815290600101906020018083116101df57829003601f168201915b5050505050905090565b600061021333848461036d565b50600192915050565b60025490565b600061022f8484846103e5565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561027c5760405162461bcd60e51b8152600401610273906106a3565b60405180910390fd5b610289853385840361036d565b506001949350505050565b601290565b6001600160a01b0382166102bf5760405162461bcd60e51b815260040161027390610774565b80600260008282546102d191906107c2565b90915550506001600160a01b038216600090815260208190526040812080548392906102fe9084906107c2565b90915550505050565b6001600160a01b0381166000908152602081905260409020545b919050565b606060048054610183906107e6565b60006102133384846103e5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103935760405162461bcd60e51b815260040161027390610730565b6001600160a01b0382166103b95760405162461bcd60e51b81526004016102739061061b565b6001600160a01b0392831660009081526001602090815260408083209490951682529290925291902055565b6001600160a01b03831661040b5760405162461bcd60e51b8152600401610273906106eb565b6001600160a01b0382166104315760405162461bcd60e51b8152600401610273906105d8565b6001600160a01b0383166000908152602081905260409020548181101561046a5760405162461bcd60e51b81526004016102739061065d565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906104a19084906107c2565b909155505050505050565b80356001600160a01b038116811461032157600080fd5b6000602082840312156104d4578081fd5b6104dd826104ac565b9392505050565b600080604083850312156104f6578081fd5b6104ff836104ac565b915061050d602084016104ac565b90509250929050565b60008060006060848603121561052a578081fd5b610533846104ac565b9250610541602085016104ac565b9150604084013590509250925092565b60008060408385031215610563578182fd5b61056c836104ac565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b818110156105b157858101830151858201604001528201610595565b818111156105c25783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b600082198211156107e157634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806107fa57607f821691505b6020821081141561081b57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212202e0c9b2f60fa1c5e278eadfe2797cff0412396ff14f935df82d0763559ec06fe64736f6c63430008000033";

export class TestToken__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestToken> {
    return super.deploy(overrides || {}) as Promise<TestToken>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
