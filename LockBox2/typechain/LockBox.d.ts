/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LockBoxInterface extends ethers.utils.Interface {
  functions: {
    "approveAsset(uint256)": FunctionFragment;
    "boxFee()": FunctionFragment;
    "cancelLockBox(uint256)": FunctionFragment;
    "claimAsset(uint256)": FunctionFragment;
    "counter()": FunctionFragment;
    "createLockBox(uint8,address,uint256,uint256,uint8,address,uint256,uint256,uint256)": FunctionFragment;
    "lockAsset(uint256)": FunctionFragment;
    "lockBoxInfo(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "updateFee()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "boxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelLockBox",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createLockBox",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockBoxInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "updateFee", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "approveAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelLockBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLockBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockBoxInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;

  events: {};
}

export class LockBox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LockBoxInterface;

  functions: {
    approveAsset(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelLockBox(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAsset(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    counter(overrides?: CallOverrides): Promise<[BigNumber]>;

    createLockBox(
      _assetAtype: BigNumberish,
      _assetAaddress: string,
      _assetAID: BigNumberish,
      _assetAQuantity: BigNumberish,
      _assetBtype: BigNumberish,
      _assetBaddress: string,
      _assetBID: BigNumberish,
      _assetBQuantity: BigNumberish,
      _expiryTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockAsset(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockBoxInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        [
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string
        ] & {
          assetType: number;
          owner: string;
          assetAddress: string;
          assetID: BigNumber;
          assetQuantity: BigNumber;
          lockStatus: number;
          approvalStatus: number;
          claimStatus: number;
          claimedBy: string;
        },
        [
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string
        ] & {
          assetType: number;
          owner: string;
          assetAddress: string;
          assetID: BigNumber;
          assetQuantity: BigNumber;
          lockStatus: number;
          approvalStatus: number;
          claimStatus: number;
          claimedBy: string;
        }
      ] & {
        lockBoxOwner: string;
        expiryTime: BigNumber;
        status: number;
        assetA: [
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string
        ] & {
          assetType: number;
          owner: string;
          assetAddress: string;
          assetID: BigNumber;
          assetQuantity: BigNumber;
          lockStatus: number;
          approvalStatus: number;
          claimStatus: number;
          claimedBy: string;
        };
        assetB: [
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string
        ] & {
          assetType: number;
          owner: string;
          assetAddress: string;
          assetID: BigNumber;
          assetQuantity: BigNumber;
          lockStatus: number;
          approvalStatus: number;
          claimStatus: number;
          claimedBy: string;
        };
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  approveAsset(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boxFee(overrides?: CallOverrides): Promise<BigNumber>;

  cancelLockBox(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAsset(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  counter(overrides?: CallOverrides): Promise<BigNumber>;

  createLockBox(
    _assetAtype: BigNumberish,
    _assetAaddress: string,
    _assetAID: BigNumberish,
    _assetAQuantity: BigNumberish,
    _assetBtype: BigNumberish,
    _assetBaddress: string,
    _assetBID: BigNumberish,
    _assetBQuantity: BigNumberish,
    _expiryTime: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockAsset(
    _id: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockBoxInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      number,
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string
      ] & {
        assetType: number;
        owner: string;
        assetAddress: string;
        assetID: BigNumber;
        assetQuantity: BigNumber;
        lockStatus: number;
        approvalStatus: number;
        claimStatus: number;
        claimedBy: string;
      },
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string
      ] & {
        assetType: number;
        owner: string;
        assetAddress: string;
        assetID: BigNumber;
        assetQuantity: BigNumber;
        lockStatus: number;
        approvalStatus: number;
        claimStatus: number;
        claimedBy: string;
      }
    ] & {
      lockBoxOwner: string;
      expiryTime: BigNumber;
      status: number;
      assetA: [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string
      ] & {
        assetType: number;
        owner: string;
        assetAddress: string;
        assetID: BigNumber;
        assetQuantity: BigNumber;
        lockStatus: number;
        approvalStatus: number;
        claimStatus: number;
        claimedBy: string;
      };
      assetB: [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string
      ] & {
        assetType: number;
        owner: string;
        assetAddress: string;
        assetID: BigNumber;
        assetQuantity: BigNumber;
        lockStatus: number;
        approvalStatus: number;
        claimStatus: number;
        claimedBy: string;
      };
    }
  >;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    approveAsset(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    boxFee(overrides?: CallOverrides): Promise<BigNumber>;

    cancelLockBox(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimAsset(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    createLockBox(
      _assetAtype: BigNumberish,
      _assetAaddress: string,
      _assetAID: BigNumberish,
      _assetAQuantity: BigNumberish,
      _assetBtype: BigNumberish,
      _assetBaddress: string,
      _assetBID: BigNumberish,
      _assetBQuantity: BigNumberish,
      _expiryTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockAsset(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lockBoxInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        [
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string
        ] & {
          assetType: number;
          owner: string;
          assetAddress: string;
          assetID: BigNumber;
          assetQuantity: BigNumber;
          lockStatus: number;
          approvalStatus: number;
          claimStatus: number;
          claimedBy: string;
        },
        [
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string
        ] & {
          assetType: number;
          owner: string;
          assetAddress: string;
          assetID: BigNumber;
          assetQuantity: BigNumber;
          lockStatus: number;
          approvalStatus: number;
          claimStatus: number;
          claimedBy: string;
        }
      ] & {
        lockBoxOwner: string;
        expiryTime: BigNumber;
        status: number;
        assetA: [
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string
        ] & {
          assetType: number;
          owner: string;
          assetAddress: string;
          assetID: BigNumber;
          assetQuantity: BigNumber;
          lockStatus: number;
          approvalStatus: number;
          claimStatus: number;
          claimedBy: string;
        };
        assetB: [
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string
        ] & {
          assetType: number;
          owner: string;
          assetAddress: string;
          assetID: BigNumber;
          assetQuantity: BigNumber;
          lockStatus: number;
          approvalStatus: number;
          claimStatus: number;
          claimedBy: string;
        };
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    updateFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    approveAsset(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boxFee(overrides?: CallOverrides): Promise<BigNumber>;

    cancelLockBox(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAsset(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    createLockBox(
      _assetAtype: BigNumberish,
      _assetAaddress: string,
      _assetAID: BigNumberish,
      _assetAQuantity: BigNumberish,
      _assetBtype: BigNumberish,
      _assetBaddress: string,
      _assetBID: BigNumberish,
      _assetBQuantity: BigNumberish,
      _expiryTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockAsset(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockBoxInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveAsset(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelLockBox(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAsset(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createLockBox(
      _assetAtype: BigNumberish,
      _assetAaddress: string,
      _assetAID: BigNumberish,
      _assetAQuantity: BigNumberish,
      _assetBtype: BigNumberish,
      _assetBaddress: string,
      _assetBID: BigNumberish,
      _assetBQuantity: BigNumberish,
      _expiryTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockAsset(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockBoxInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
